/**
 * Exemple d'utilisation des diff√©rentes strat√©gies de cache de SmartCache
 * 
 * Cet exemple montre comment utiliser les diff√©rentes strat√©gies de cache
 * disponibles dans SmartCache et comment elles se comportent.
 */
import SmartCache from '../src/index';

async function main() {
  // Tester chaque strat√©gie de cache
  await testCacheFirst();
  await testStaleWhileRevalidate();
  await testNetworkFirst();
}

/**
 * Test de la strat√©gie "Cache First"
 * Priorit√© au cache, r√©seau uniquement si pas en cache ou expir√©
 */
async function testCacheFirst() {
  console.log('\nüìñ Test de la strat√©gie "Cache First"');
  console.log('------------------------------------');
  
  const client = SmartCache.createClient({
    strategy: 'cache-first',
    maxAge: 5000, // 5 secondes
  });
  
  try {
    // 1. Premi√®re requ√™te - devrait aller au r√©seau
    console.log('1. Premi√®re requ√™te (r√©seau)...');
    const response1 = await client.get('https://jsonplaceholder.typicode.com/users/1');
    console.log(`   R√©ponse: ${response1.data.name}`);
    console.log(`   Stats: ${JSON.stringify(client.getStats())}`);
    
    // 2. Deuxi√®me requ√™te - devrait venir du cache
    console.log('\n2. Deuxi√®me requ√™te (cache)...');
    const response2 = await client.get('https://jsonplaceholder.typicode.com/users/1');
    console.log(`   R√©ponse: ${response2.data.name}`);
    console.log(`   Stats: ${JSON.stringify(client.getStats())}`);
    
    // 3. Attendre expiration du cache
    console.log('\n3. Attente de 6 secondes pour expiration du cache...');
    await new Promise(resolve => setTimeout(resolve, 6000));
    
    // 4. Troisi√®me requ√™te - devrait aller au r√©seau car expir√©
    console.log('4. Troisi√®me requ√™te apr√®s expiration (r√©seau)...');
    const response3 = await client.get('https://jsonplaceholder.typicode.com/users/1');
    console.log(`   R√©ponse: ${response3.data.name}`);
    console.log(`   Stats: ${JSON.stringify(client.getStats())}`);
    
  } catch (error) {
    console.error('Erreur:', error);
  }
}

/**
 * Test de la strat√©gie "Stale While Revalidate"
 * Retourne le cache imm√©diatement m√™me s'il est expir√©, et rafra√Æchit en arri√®re-plan
 */
async function testStaleWhileRevalidate() {
  console.log('\nüîÑ Test de la strat√©gie "Stale While Revalidate"');
  console.log('--------------------------------------------');
  
  const client = SmartCache.createClient({
    strategy: 'stale-while-revalidate',
    maxAge: 5000, // 5 secondes
  });
  
  try {
    // 1. Premi√®re requ√™te - devrait aller au r√©seau
    console.log('1. Premi√®re requ√™te (r√©seau)...');
    const response1 = await client.get('https://jsonplaceholder.typicode.com/users/2');
    console.log(`   R√©ponse: ${response1.data.name}`);
    console.log(`   Stats: ${JSON.stringify(client.getStats())}`);
    
    // 2. Deuxi√®me requ√™te - devrait venir du cache
    console.log('\n2. Deuxi√®me requ√™te (cache)...');
    const response2 = await client.get('https://jsonplaceholder.typicode.com/users/2');
    console.log(`   R√©ponse: ${response2.data.name}`);
    console.log(`   Stats: ${JSON.stringify(client.getStats())}`);
    
    // 3. Attendre expiration du cache
    console.log('\n3. Attente de 6 secondes pour expiration du cache...');
    await new Promise(resolve => setTimeout(resolve, 6000));
    
    // 4. Troisi√®me requ√™te - devrait retourner le cache expir√© et rafra√Æchir en arri√®re-plan
    console.log('4. Troisi√®me requ√™te apr√®s expiration (cache expir√© + rafra√Æchissement)...');
    const response3 = await client.get('https://jsonplaceholder.typicode.com/users/2');
    console.log(`   R√©ponse: ${response3.data.name}`);
    console.log(`   Stats: ${JSON.stringify(client.getStats())}`);
    
    // 5. Attendre le rafra√Æchissement en arri√®re-plan
    console.log('\n5. Attente de 1 seconde pour le rafra√Æchissement en arri√®re-plan...');
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // 6. Quatri√®me requ√™te - devrait venir du cache rafra√Æchi
    console.log('6. Quatri√®me requ√™te (cache rafra√Æchi)...');
    const response4 = await client.get('https://jsonplaceholder.typicode.com/users/2');
    console.log(`   R√©ponse: ${response4.data.name}`);
    console.log(`   Stats: ${JSON.stringify(client.getStats())}`);
    
  } catch (error) {
    console.error('Erreur:', error);
  }
}

/**
 * Test de la strat√©gie "Network First"
 * Priorit√© au r√©seau, cache uniquement en cas d'erreur r√©seau
 */
async function testNetworkFirst() {
  console.log('\nüåê Test de la strat√©gie "Network First"');
  console.log('------------------------------------');
  
  const client = SmartCache.createClient({
    strategy: 'network-first',
    maxAge: 60000, // 1 minute
  });
  
  try {
    // 1. Premi√®re requ√™te - devrait aller au r√©seau
    console.log('1. Premi√®re requ√™te (r√©seau)...');
    const response1 = await client.get('https://jsonplaceholder.typicode.com/users/3');
    console.log(`   R√©ponse: ${response1.data.name}`);
    console.log(`   Stats: ${JSON.stringify(client.getStats())}`);
    
    // 2. Deuxi√®me requ√™te - devrait aller au r√©seau malgr√© le cache valide
    console.log('\n2. Deuxi√®me requ√™te (r√©seau malgr√© cache valide)...');
    const response2 = await client.get('https://jsonplaceholder.typicode.com/users/3');
    console.log(`   R√©ponse: ${response2.data.name}`);
    console.log(`   Stats: ${JSON.stringify(client.getStats())}`);
    
    // 3. Simuler une requ√™te avec erreur r√©seau vers une URL invalide
    // Le cache sera utilis√© comme fallback
    console.log('\n3. Simulation d\'une erreur r√©seau (utilisation du cache comme fallback)...');
    
    // D'abord mettons en cache une r√©ponse valide
    await client.get('https://jsonplaceholder.typicode.com/users/3');
    
    try {
      // Puis essayons d'acc√©der √† une URL qui causera une erreur
      const response3 = await client.get('https://invalid-url-that-will-fail.com');
      console.log(`   R√©ponse: ${JSON.stringify(response3.data)}`);
    } catch (error) {
      console.log('   Erreur attendue: pas de cache disponible pour cette URL');
    }
    
    // 4. Test du fallback avec une URL mise en cache
    try {
      // Simuler une erreur r√©seau en demandant une URL correcte mais avec un timeout
      console.log('\n4. Test du fallback vers le cache pour une URL mise en cache...');
      
      // Cr√©er un client avec timeout court pour forcer l'erreur
      const errorClient = SmartCache.createClient({
        strategy: 'network-first',
      });
      
      // Mettre en cache une r√©ponse valide
      await errorClient.get('https://jsonplaceholder.typicode.com/users/3');
      
      // Pr√©tendre que l'API est maintenant inaccessible
      console.log('   Simulation d\'une erreur r√©seau...');
      // Ici on devrait normalement modifier le client pour qu'il √©choue,
      // mais pour l'exemple on va juste montrer que le comportement serait de tomber sur le cache
      console.log('   En cas d\'erreur, le client utiliserait la version en cache');
    } catch (error) {
      console.error('   Erreur inattendue:', error);
    }
    
  } catch (error) {
    console.error('Erreur:', error);
  }
}

// Ex√©cuter l'exemple
main().catch(console.error); 